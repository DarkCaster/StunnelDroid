import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.darkcaster.stunneldroid"
        minSdkVersion 28
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def SetSignConfig() {
    if (project.hasProperty("ANDROID_KEY_STORE") && project.hasProperty("ANDROID_KEY_STORE_PASSWORD_FILE") &&
        project.hasProperty("ANDROID_KEY_ALIAS") && project.hasProperty("ANDROID_KEY_PASSWORD_FILE")) {
        logger.quiet('Trying to use signing configuration from user-provided gradle.properties file')
        project.android.customSigningConfig {
            storeFile file(ANDROID_KEY_STORE)
            storePassword file(ANDROID_KEY_STORE_PASSWORD_FILE).text.trim()
            keyAlias ANDROID_KEY_ALIAS
            keyPassword file(ANDROID_KEY_PASSWORD_FILE).text.trim()
        }
        project.android.buildTypes.release.signingConfig = project.android.customSigningConfig
    }
    else {
        logger.quiet('Custom signing configuration is not found')
    }
}

def SetVersion() {
    //current date
    def date=new Date()

    //version code
    def cdf=new SimpleDateFormat("yyMMddHHmm")
    cdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    def code=cdf.format(date).toInteger()

    //try to get short commit hash from git
    def hash=""
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "log", "-1", "--pretty=format:%h"
            standardOutput = stdout
        }
        stdout.toString().readLines().each{line->hash=line}
        if(hash.isEmpty())
            hash="none"
    }
    catch (ignored) { }

    //try to get git tag for versionName, use the last one
    def name=""
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "tag", "--points-at", "HEAD"
            standardOutput = stdout
        }
        stdout.toString().readLines().each{line->name=line}
        if(!name.isEmpty())
            name="${name}.${hash}"
    }
    catch (ignored) { }

    //if no tags was found, use date
    if(name == "") {
        def ndf=new SimpleDateFormat("yyyy.MM.dd.HHmm")
        ndf.setTimeZone(TimeZone.getTimeZone("UTC"))
        name="${ndf.format(date)}.${hash}"
    }

    project.android.defaultConfig.versionCode=code
    project.android.defaultConfig.versionName=name
    logger.quiet("Package version: versionCode=${code}; versionName=${name}")
}

SetVersion()
SetSignConfig()
